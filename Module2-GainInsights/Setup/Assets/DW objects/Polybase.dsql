-- Create a master key.
-- Only necessary if one does not already exist.
-- Required to encrypt the credential secret in the next step.

CREATE MASTER KEY;


-- Create a database scoped credential
-- IDENTITY: Provide any string, it is not used for authentication to Azure storage.
-- SECRET: Provide your Azure storage account key.

CREATE DATABASE SCOPED CREDENTIAL AzureStorageCredential
WITH
    IDENTITY = 'user',
    SECRET = '<Azure storage key>'
;


-- Create an external data source
-- TYPE: HADOOP - PolyBase uses Hadoop APIs to access data in Azure blob storage.
-- LOCATION: Provide Azure storage account name and blob container name.
-- CREDENTIAL: Provide the credential created in the previous step.

CREATE EXTERNAL DATA SOURCE AzureStorage
WITH (
    TYPE = HADOOP,
    LOCATION = 'wasbs://samplelogs@<Azure storage account name>.blob.core.windows.net',
    CREDENTIAL = AzureStorageCredential
);


-- Create an external file format
-- FORMAT_TYPE: Type of file format in Azure storage (supported: DELIMITEDTEXT, RCFILE, ORC, PARQUET).
-- FORMAT_OPTIONS: Specify field terminator, string delimiter, date format etc. for delimited text files.
-- Specify DATA_COMPRESSION method if data is compressed.

CREATE EXTERNAL FILE FORMAT TextFile
WITH (
    FORMAT_TYPE = DelimitedText,
    FORMAT_OPTIONS (FIELD_TERMINATOR = '|')
);


-- Create the external table
-- Specify column names and data types. This needs to match the data in the sample file.
-- LOCATION: Specify path to file or directory that contains the data (relative to the blob container).
-- To point to all files under the blob container, use LOCATION='.'

CREATE EXTERNAL TABLE dbo.ProductLogsExternal(productid int, title nvarchar(50), category nvarchar(50), prodtype nvarchar(10), totalClicked int)
WITH (
    LOCATION='/adwsource/',
    DATA_SOURCE=AzureStorage,
    FILE_FORMAT=TextFile
);

CREATE STATISTICS productid on ProductLogsExternal(productid);
CREATE STATISTICS title on ProductLogsExternal(title);
CREATE STATISTICS category on ProductLogsExternal(category);
CREATE STATISTICS prodtype on ProductLogsExternal(prodtype);
CREATE STATISTICS totalClicked on ProductLogsExternal(totalClicked);

-- Run a query on the external table

SELECT COUNT(*) FROM dbo.ProductLogsExternal;
SELECT * FROM ProductLogsExternal

CREATE TABLE ProductLogSummary 
WITH
(   
    CLUSTERED COLUMNSTORE INDEX,
    DISTRIBUTION = ROUND_ROBIN
)
AS
SELECT
	category,
	title,
	SUM(CASE WHEN prodtype = 'view' THEN totalClicked ELSE 0 END) AS prodviews,
	SUM(CASE WHEN prodtype = 'add' THEN totalClicked ELSE 0 END) AS prodadds
FROM dbo.ProductLogsExternal 
GROUP BY title, category

CREATE STATISTICS category on ProductLogSummary(category);
CREATE STATISTICS title on ProductLogSummary(title);
CREATE STATISTICS prodviews on ProductLogSummary(prodviews);
CREATE STATISTICS prodadds on ProductLogSummary(prodadds);

SELECT * FROM ProductLogSummary